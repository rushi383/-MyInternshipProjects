Step 1: Set Up Your React Application
Initialize the React project:

bash
Code
npx create-react-app transactions-dashboard
cd transactions-dashboard
npm install axios chart.js react-chartjs-2
Folder Structure:

src/components/TransactionTable.js
src/components/Statistics.js
src/components/BarChart.js
src/App.js
Step 2: Create the Components
1. TransactionTable Component
This component will handle the transaction listing.

javascript
Code
// src/components/TransactionTable.js
import React, { useEffect, useState } from 'react';
import axios from 'axios';

const TransactionTable = ({ month, searchTerm, setSearchTerm, page, setPage }) => {
    const [transactions, setTransactions] = useState([]);
    const [total, setTotal] = useState(0);

    const fetchTransactions = async () => {
        const response = await axios.get(`/transactions?search=${searchTerm}&page=${page}`);
        setTransactions(response.data.transactions);
        setTotal(response.data.total);
    };

    useEffect(() => {
        fetchTransactions();
    }, [month, searchTerm, page]);

    return (
        <div>
            <input 
                type="text" 
                placeholder="Search transactions" 
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)} 
            />
            <table>
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Description</th>
                        <th>Price</th>
                        <th>Date of Sale</th>
                    </tr>
                </thead>
                <tbody>
                    {transactions.map(transaction => (
                        <tr key={transaction._id}>
                            <td>{transaction.title}</td>
                            <td>{transaction.description}</td>
                            <td>{transaction.price}</td>
                            <td>{new Date(transaction.dateOfSale).toLocaleDateString()}</td>
                        </tr>
                    ))}
                </tbody>
            </table>
            <div>
                <button onClick={() => setPage(prev => Math.max(prev - 1, 1))}>Previous</button>
                <button onClick={() => setPage(prev => prev + 1)}>Next</button>
            </div>
        </div>
    );
};

export default TransactionTable;
2. Statistics Component
This component will display the statistics for the selected month.

javascript
Code
// src/components/Statistics.js
import React, { useEffect, useState } from 'react';
import axios from 'axios';

const Statistics = ({ month }) => {
    const [stats, setStats] = useState({ totalSaleAmount: 0, totalSoldItems: 0, totalNotSoldItems: 0 });

    useEffect(() => {
        const fetchStatistics = async () => {
            const response = await axios.get(`/statistics/${month}`);
            setStats(response.data);
        };

        fetchStatistics();
    }, [month]);

    return (
        <div>
            <h3>Statistics for {month}</h3>
            <p>Total Sale Amount: ${stats.totalSaleAmount}</p>
            <p>Total Sold Items: {stats.totalSoldItems}</p>
            <p>Total Not Sold Items: {stats.totalNotSoldItems}</p>
        </div>
    );
};

export default Statistics;
3. BarChart Component
This component will display the bar chart using Chart.js.

javascript
Code
// src/components/BarChart.js
import React, { useEffect, useState } from 'react';
import { Bar } from 'react-chartjs-2';
import axios from 'axios';

const BarChart = ({ month }) => {
    const [data, setData] = useState({ labels: [], datasets: [] });

    useEffect(() => {
        const fetchBarChartData = async () => {
            const response = await axios.get(`/bar-chart/${month}`);
            const priceRanges = response.data.map(item => item.range);
            const counts = response.data.map(item => item.count);

            setData({
                labels: priceRanges,
                datasets: [{
                    label: 'Number of Items',
                    data: counts,
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 1,
                }]
            });
        };

        fetchBarChartData();
    }, [month]);

    return (
        <div>
            <h3>Transactions Bar Chart for {month}</h3>
            <Bar data={data} />
        </div>
    );
};

export default BarChart;
Step 3: Integrate Components in App.js
Combine all components in the main App component.

javascript
Code
// src/App.js
import React, { useState } from 'react';
import TransactionTable from './components/TransactionTable';
import Statistics from './components/Statistics';
import BarChart from './components/BarChart';

const months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];

const App = () => {
    const [month, setMonth] = useState("March");
    const [searchTerm, setSearchTerm] = useState('');
    const [page, setPage] = useState(1);

    return (
        <div>
            <h1>Transactions Dashboard</h1>
            <label>
                Select Month:
                <select value={month} onChange={(e) => setMonth(e.target.value)}>
                    {months.map((m, index) => (
                        <option key={index} value={m}>{m}</option>
                    ))}
                </select>
            </label>
            <TransactionTable month={month} searchTerm={searchTerm} setSearchTerm={setSearchTerm} page={page} setPage={setPage} />
            <Statistics month={month} />
            <BarChart month={month} />
        </div>
    );
};

export default App;
Step 4: Styling
You can add CSS styles to make the dashboard visually appealing. For example, you could create a styles.css file and import it into your App.js.

Step 5: Running the Application
Make sure your backend API is running, then start the React application:

bash
Copy code
npm start
